require 'simplecov'
SimpleCov.start do
  add_filter "features/support/selectors.rb"
  add_filter "features/step_definitions/web_steps.rb"
  add_filter "features/support/paths.rb"
end

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'selenium-webdriver'

# frozen_string_literal: true

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# Capybara.default_driver = :selenium # :selenium_chrome and :selenium_chrome_headless are also registered

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

Capybara.register_driver :headless_firefox do |app|
  options = Selenium::WebDriver::Firefox::Options.new
  options.headless! # added on https://github.com/SeleniumHQ/selenium/pull/4762

  Capybara::Selenium::Driver.new app,
                                 browser: :remote,
                                 url: "http://firefox:4444/wd/hub",
                                 options: options
end

Capybara.javascript_driver = :headless_firefox
Capybara.current_driver = Capybara.javascript_driver
Capybara.server_port = 3000
Capybara.server_host = IPSocket.getaddress(Socket.gethostname)
Capybara.app_host = "http://#{IPSocket.getaddress(Socket.gethostname)}:3000"
Capybara.default_max_wait_time = 10
Capybara.current_session.driver.browser.file_detector = nil



# Capybara.register_driver :docker_firefox do |app|
#   dcap__ = Selenium::WebDriver::Remote::Capabilities.firefox({})
#
#   # dcap__ << '-headless'
#   # dcap__ = Selenium::WebDriver::Firefox::Options.new(args: ['-headless'])
#   options = Selenium::WebDriver::Firefox::Options.new(args: ['-headless'])
#   Capybara::Selenium::Driver.new(app, browser: :remote, capabilities: dcap__, url: "http://browser:4444/wd/hub")
#
#
#                                  #
#                                  # browser: :remote,
#                                  # url: "http://browser:4444/wd/hub",
#                                  # options: dcap__)
# end

# Capybara.register_driver :headless_chrome do |app|
#   capabilities = Selenium::WebDriver::Remote::Capabilities.chrome(
#     chromeOptions: {
#       args: %w[headless no-sandbox enable-features=NetworkService,NetworkServiceInProcess]
#     }
#   )
#
#   Capybara::Selenium::Driver.new app,
#                                  browser: :remote,
#                                  options: capabilities,
#                                  url: "http://browser:7900/wd/hub"
# end
#
# Capybara.register_driver :headless_chrome do |app|
#   chrome_capabilities = ::Selenium::WebDriver::Remote::Capabilities.chrome('goog:chromeOptions' => { 'args': %w[no-sandbox headless disable-gpu window-size=1400,1400] })
#   Capybara::Selenium::Driver.new(app,
#                                    browser: :chrome,
#                                  url: "http://chrome:4444/wd/hub",
#                                  capabilities: chrome_capabilities)
# end
#
# Capybara.javascript_driver = :headless_chrome
# Capybara.server_port = 3000
# Capybara.server_host = IPSocket.getaddress(Socket.gethostname)
# Capybara.app_host = "http://#{IPSocket.getaddress(Socket.gethostname)}:3000"
